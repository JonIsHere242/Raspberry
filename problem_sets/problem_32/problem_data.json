{
  "index": 32,
  "sector": "math",
  "difficulty": "normal regularly encountered",
  "problem_statement": "**Problem: \"Optimizing Traffic Signal Control in a Smart City\"**\nIn the book 'Urban Traffic Management and Road Safety' there is a section on optimizing traffic signal control using machine learning. Given a dataset of {traffic_signals}.csv with columns of IntersectionID, TimeStamp, FlowRate, Density, Speed, and TravelTime from the folder '/TrafficData/', can you develop an algorithm in Python to predict traffic congestion at each intersection and optimize traffic signal timing using reinforcement learning? Ideally, you should use Q-learning to update signal timings based on real-time data and achieve a 20% reduction in average travel time. Create a new csv called 'optimized_signals.csv' with the updated signal timings for each intersection.\n**Dataset:**\n- The dataset contains historical data from {traffic_signals}.csv\n- Each row represents an observation of traffic conditions at a particular intersection\n- Columns:\n  - IntersectionID (string)\n  - TimeStamp (datetime)\n  - FlowRate (float, units: vehicles per hour)\n  - Density (float, units: vehicles per kilometer squared)\n  - Speed (float, units: kilometers per hour)\n  - TravelTime (float, units: minutes)\n**Requirements:**\n- Use Python with the following libraries:\n  - pandas for data manipulation\n  - numpy for numerical computations\n  - tensorflow for reinforcement learning\n  - matplotlib and/or seaborn for visualization\n- Implement Q-learning to update signal timings based on real-time data"
}