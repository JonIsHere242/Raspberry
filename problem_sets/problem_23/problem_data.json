{
  "index": 23,
  "sector": "heuristics",
  "difficulty": "extremely challenging but theoretically possible",
  "problem_statement": "Problem Statement:\nCreate a heuristic search algorithm using A* (A-star) with a custom heuristic function based on Manhattan distance in 3D space. Given a large dataset of 3D points stored in the '3D_Points.csv' file, design an efficient data structure to store and query these points efficiently.\nThe points are described by their x, y, and z coordinates in the csv file.\nImplement the A* search algorithm using Python with the NetworkX library for graph creation and manipulation. The goal is to find the shortest path between two randomly selected points from the dataset, A and B, represented as (x1,y1,z1) and (x2,y2,z2).\nCreate a new csv file 'shortest_path.csv' that contains the coordinates of all points on the shortest path from point A to point B.\nThe heuristic function should be based on the Manhattan distance formula: d = |x2 - x1| + |y2 - y1| + |z2 - z1|. However, you need to incorporate a 'cost' factor into this formula that represents the difficulty of traversing each dimension in 3D space. This cost factor should be learned from the dataset and incorporated into the heuristic function.\nTo make it more challenging:\n- The points in the '3D_Points.csv' file are not necessarily connected by edges, you need to create an undirected graph with points as nodes and edges connecting nearest neighbors.\n-"
}