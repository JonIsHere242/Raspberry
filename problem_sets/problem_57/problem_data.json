{
  "index": 57,
  "sector": "coding",
  "difficulty": "very hard and challenging for anyone but the best to solve",
  "problem_statement": "## Problem: Real-Time Anomaly Detection in Financial Transactions Using Autoencoders\n**Sector:** Finance & Banking\n**Language:** Python\n**Libraries/Frameworks:** TensorFlow, NumPy, Pandas, Matplotlib, Seaborn\nIn the book \"Deep Learning for Time Series Forecasting\" by Zhen Hua Hou et al., there is a section on using autoencoders to detect anomalies in real-time financial transactions. Given a dataset of transaction records stored in a CSV file named `transaction_data.csv` located in the `/data/finance/` directory, replicate this anomaly detection process using an autoencoder.\n**Dataset Description:**\n- The CSV file contains the following columns:\n  - `Transaction_ID`: Unique identifier for each transaction\n  - `Timestamp`: Time of the transaction (in seconds since epoch)\n  - `Amount`: Monetary value of the transaction\n  - `Category`: Type of category (e.g., 'credit', 'debit')\n- The dataset has a mix of normal and anomalous transactions, with anomalies being significantly larger in amount than the norm.\n**Task:**\n1. **Preprocessing**: Load the dataset into a Pandas dataframe, perform any necessary data cleaning (e.g., handling missing values), and normalize the transaction amounts using the Min-Max Scaler from Scikit-learn.\n2. **Autoencoder Architecture**: Design and implement an autoencoder model with the following components:\n   - Encoder: 2 fully connected layers with"
}